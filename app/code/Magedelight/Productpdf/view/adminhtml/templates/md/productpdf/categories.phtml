<div class="page-main-actions">
    <div class="page-actions">
        <div class="page-actions-inner">
            <div class="page-actions-buttons">
                <button id="md_productpdf_print_act" title="<?= /* @noEscape */ __('Print Products') ?>" type="button" class="action-default primary">
                    <span><?= /* @noEscape */ __('Print Product Booklet') ?></span>
                </button>
            </div>
        </div>
    </div>
</div>
<div class="entry-edit form-inline">
    <div id="md_productpdf_booklet_section_content" class="ui-tabs-panel ui-widget-content ui-corner-bottom">
        <div class="entry-edit form-inline">
            <fieldset id="md_productpdf_booklet_fieldset" class="fieldset admin__fieldset ">
                <legend class="legend">
                    <span><?= /* @noEscape */ __('Category Selection') ?></span>
                </legend>
                <div class="admin__field field field-title  required _required">
                    <?php if ($block->getRoot()): ?>
                    <div class="tree-holder">
                        <div id="tree-div" class="tree-wrapper">
                        <input type="hidden" name="category_ids" id="product_categories" value="">
                        <input type="hidden" name="category_ids_path" id="product_categories_path" value="">
                        <div id="product-categories" class="tree"></div>
                        </div>
                    </div>
                    <?php endif; ?>
                </div>
            </fieldset>
        </div>
    </div>
</div>
<!--[if IE]>
<script id="ie-deferred-loader" defer="defer" src=""></script>
<![endif]-->
<?php if ($block->getRoot()): ?>
<script>
var tree;
require([
    "jquery",
    "extjs/ext-tree-checkbox",
    "mage/adminhtml/form",
    "mage/translate"
], function(jQuery){
jQuery('#md_productpdf_print_act').on('click',function(){
   var valueObj = {};
   if(jQuery('#product_categories').val() != ''){
       valueObj['store'] = 0;
       <?php if ($this->getRequest()->getParam('store', null)): ?>
       valueObj['store'] = <?= /* @noEscape */ $this->getRequest()->getParam('store', null); ?>;
        <?php endif; ?>
        var queryString = jQuery.param(valueObj);
        
        var urlSlash = queryString.replace(/&/g,'/').replace(/=/g,'/');
        
        var url = '<?= /* @noEscape */ $this->getFrontUrl($this->getRequest()->getParam('store', null)) ?>md_productpdf/index/index/'+urlSlash+'/category/'+jQuery('#product_categories').val();
        window.open(url,'_blank');
   }else{
       alert("<?= /* @noEscape */ __('Please Select Categories for print.') ?>");
       return false;
   }
});
Ext.EventManager.onDocumentReady(function(){
        var categoryLoader = new Ext.tree.TreeLoader({
            dataUrl: '<?= /* @noEscape */ $block->getLoadTreeUrl() ?>'
        });
        categoryLoader.createNode = function(config) {
        config.uiProvider = Ext.tree.CheckboxNodeUI;
        var node;
        if (config.children && !config.children.length) {
            delete(config.children);
            node = new Ext.tree.AsyncTreeNode(config);

        } else {
            node = new Ext.tree.TreeNode(config);
        }
        return node;
        };
        categoryLoader.on("beforeload", function(treeLoader, node) {
            treeLoader.baseParams.category = node.attributes.id;
        });

        categoryLoader.on("load", function(treeLoader, node, config) {
            varienWindowOnload();
            node.childNodes.each(function(e){
            if($('product_categories_path').value.split(',').indexOf(e.attributes.id)!=-1)
                e.expand();
            })
        });
        
        var tree = new Ext.tree.TreePanel('product-categories', {
            animate:true,
            loader: categoryLoader,
            enableDD:false,
            containerScroll: true,
            rootUIProvider: Ext.tree.CheckboxNodeUI,
            selModel: new Ext.tree.CheckNodeMultiSelectionModel(),
            rootVisible: ''
        }); 
        tree.on('check', function(node) {
        if(node.attributes.checked) {
            categoryAdd(node.id);
        } else {
            categoryRemove(node.id);
        }
        varienElementMethods.setHasChanges(node.getUI().checkbox);
    }, tree);
        var root = new Ext.tree.TreeNode({
        text: '<?= /* @noEscape */ htmlentities($block->getRoot()->getName()) ?>',
        draggable:false,
        checked:'<?= /* @noEscape */ $block->getRoot()->getChecked() ?>',
        id:'<?= /* @noEscape */ $block->getRoot()->getId() ?>',
        disabled: <?= /* @noEscape */ ($block->getRoot()->getDisabled() ? 'true' : 'false') ?>,
        uiProvider: Ext.tree.CheckboxNodeUI
    });
    tree.setRootNode(root);
    bildCategoryTree(root, <?= /* @noEscape */ $block->getTreeJson() ?>);
    tree.addListener('click', categoryClick.createDelegate(this));

    // render the tree
    tree.render();
    root.expand();
        
    });
    function bildCategoryTree(parent, config){
    if (!config) return null;

    if (parent && config && config.length){
        for (var i = 0; i < config.length; i++){
            config[i].uiProvider = Ext.tree.CheckboxNodeUI;
            var node;
            var _node = Object.clone(config[i]);
            if (_node.children && !_node.children.length) {
                delete(_node.children);
                node = new Ext.tree.AsyncTreeNode(_node);

            } else {
                node = new Ext.tree.TreeNode(config[i]);
            }
            parent.appendChild(node);
            node.loader = node.getOwnerTree().loader;
            if(config[i].children){
                bildCategoryTree(node, config[i].children);
            }
        }
    }
}

function categoryClick(node, e){
    if (node.disabled) {
        return;
    }
    node.getUI().check(!node.getUI().checked());
    varienElementMethods.setHasChanges(Event.element(e), e);
};
function categoryAdd(id) {
    var ids = $('product_categories').value.split(',');
    ids.push(id);
    $('product_categories').value = ids.join(',');
}
function categoryRemove(id) {
    var ids = $('product_categories').value.split(',');
    // bug #7654 fixed
    while (-1 != ids.indexOf(id)) {
        ids.splice(ids.indexOf(id), 1);
    }
    $('product_categories').value = ids.join(',');
}
});
</script>
<?php endif; ?>
