<?php
/**
 * Copyright Â© Lyra Network.
 * This file is part of Systempay plugin for Magento 2. See COPYING.md for license details.
 *
 * @author    Lyra Network (https://www.lyra.com/)
 * @copyright Lyra Network
 * @license   https://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)
 */
?>

<p><b>
    <?php echo $block->escapeHtml($block->getMethod()->getTitle()); ?>

    <?php
    $payment = $block->getInfo();

    if (stripos($payment->getMethod(), 'systempay_multi') === 0) {
        // Payment in installments, show selected option.
        $option = $payment->getAdditionalInformation(\Lyranetwork\Systempay\Helper\Payment::MULTI_OPTION);
        if (is_string($option)) {
            $option = @unserialize($option);
        }

        if (is_array($option) && ! empty($option)) {
            echo '<br />';
            echo $block->escapeHtml($option['label'] . ' (' . $option['count'] . 'X)');
        }
    } elseif ($payment->getMethod() === 'systempay_oney') {
        // Oney payment, show selected Oney option.
        $option = $payment->getAdditionalInformation(\Lyranetwork\Systempay\Helper\Payment::ONEY_OPTION);
        if (is_string($option)) {
            $option = @unserialize($option);
        }

        if (is_array($option) && ! empty($option)) {
            echo '<br />';
            echo $block->escapeHtml($option['label']);
        }
    }  elseif (stripos($payment->getMethod(), 'systempay_other') === 0) {
        // Other payment means, show selected option.
        $option = $payment->getAdditionalInformation(\Lyranetwork\Systempay\Helper\Payment::OTHER_OPTION);
        if (is_string($option)) {
            $option = @unserialize($option);
        }

        if (is_array($option) && ! empty($option)) {
            echo '<br />';
            echo $block->escapeHtml($option['label'] . ' (' . $option['means']. ')');
        }
    }
    ?>
</b></p>

<?php
if ($payment->getCcTransId()) {
    echo $block->getResultDescHtml();
    echo '<br /><br />';

    echo '<b>' . __('Transaction ID') . ': </b>' . $block->escapeHtml($payment->getCcTransId());
    echo '<br />';

    if ((stripos($payment->getMethod(), 'systempay_multi') === false) && ($payment->getCcType() !== 'MULTI')) {
        echo '<b>' . __('Transaction UUID') . ': </b>' .
            $block->escapeHtml($payment->getAdditionalInformation(\Lyranetwork\Systempay\Helper\Payment::TRANS_UUID));
        echo '<br />';
    }

    if ($payment->getCcType() === 'MULTI') { // Multi brand.
        echo $block->getMultiPaymentDetailsHtml();
    } else {
        echo $block->getPaymentDetailsHtml();
    }

    // 3DS results.
    echo '<b>' . __('3DS Authentication') . ': </b>';
    if ($threedsStatus = $payment->getAdditionalInformation('threeds_status')) {
        echo $threedsStatus;
        echo '<br />';
        echo ($threedsCavv = $payment->getCcSecureVerify()) ? '<b>' . __('3DS Certificate') . ': </b>' . $threedsCavv : '';
        echo '<br />';
        echo ($threedsAuthType = $payment->getAdditionalInformation('threeds_auth_type')) ? '<b>' . __('Authentication Type') . ': </b>' . $threedsAuthType : '';
    } else {
        echo 'UNAVAILABLE';
    }

    // Risk control result translations.
    $riskControl = $payment->getAdditionalInformation(\Lyranetwork\Systempay\Helper\Payment::RISK_CONTROL);
    if (is_string($riskControl)) {
        $riskControl = @unserialize($riskControl);
    }

    if (is_array($riskControl) && ! empty($riskControl)) {
        echo '<br />';
        echo '<b>' . __('Fraud Control Result:') . '</b>';

        $colors = [
            'OK' => '#4F8A10',
            'WARNING' => '#9F6000',
            'ERROR' => '#D8000C'
        ];

        foreach ($riskControl as $key => $value) {
            echo '<br />&nbsp;&nbsp;- ' . $block->escapeHtml($block->translate($key, 'risk_control')) . ' : ';
            echo '<span style="color: ' . $block->escapeHtml($colors[$value]) . ';">' .
                $block->escapeHtml($value) . '</span>';
        }
    }

    $riskAssessment = $payment->getAdditionalInformation(\Lyranetwork\Systempay\Helper\Payment::RISK_ASSESSMENT);
    if (is_string($riskAssessment)) {
        $riskAssessment = @unserialize($riskAssessment);
    }

    if (is_array($riskAssessment) && ! empty($riskAssessment)) {
        echo '<br />';
        echo '<b>' . __('Advanced Risk Assessment Result:') . '</b>';

        foreach ($riskAssessment as $value) {
            echo '<br />&nbsp;&nbsp;- ' . $block->escapeHtml($block->translate($value, 'risk_assessment'));
        }
    }

    echo '<br />';
}